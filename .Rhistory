means_sd = means_sd[2:6]
predCluster<-function(x1,centroid=centroides, means = means){
distancias <- c()
x1 <- (x1-means_sd[1,])/means_sd[2,]
for (n in c(1,2,3)){
dist_i<-sqrt(sum((x1-centroides[,n])^2))
distancias <- append(distancias, dist_i)
}
return(which(distancias == min(distancias) ) )
# los valores que queremos que nos retorne la función en base al cluster que pertenece
# pueden ser cambiados en los valores entre comillas despues de cada return
# TENER CUIDADO DE MANTENER EL ORDEN IDENTIFICADO EN EL ANÁLISIS GENERAL
}
#Probando la función por observación
"
X <- c(0,0,0,0,0)
Y <- predCluster(X,centroides)
Y
X <- c(0.5, 1, 0.5, 0.5, 0.5)
Y <- predCluster(X,centroides)
Y
X <- c(0.7071068
,0.7071068
,0.7071068
,0.7071068
,0.7071068
)
Y <- predCluster(X,centroides)
Y
X <- c(1
,0
,1
,1
,1
)
(X-means_sd[1,])/means_sd[2,]
Y <- predCluster(X,centroides)
Y
"
predClusterVector <- function(df_Valores,centroids=centroides){
cluster <- c()
for ( row in 1:dim(df_Valores)[1]){
cluster[row] <- predCluster(df_Valores[row,])
}
print(cluster)
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
#Probando la función con un vector de variables
"
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
a
Prueba1 <- as.data.frame(Prueba1)
Prueba1$Cluster <- a
Prueba1
"
View(test_data)
source('~/Documents/techo/indice de riqueza relativa/predict.R')
general_Urbano$refriAdj <- general_Urbano$refri/general_Urbano$sqrtNro
general_Urbano$compuAdj <- general_Urbano$compu/general_Urbano$sqrtNro
general_Urbano$tvAdj <- general_Urbano$tv / general_Urbano$sqrtNro
general_Urbano$lavadoraAdj <- general_Urbano$lavadora / general_Urbano$sqrtNro
general_Urbano$autoAdj <- general_Urbano$auto / general_Urbano$sqrtNro
head(general_Urbano)
test_data$refriAdj <- general_Urbano$refri/general_Urbano$sqrtNro
test_data$compuAdj <- general_Urbano$compu/general_Urbano$sqrtNro
test_data$tvAdj <- general_Urbano$tv / general_Urbano$sqrtNro
test_data$lavadoraAdj <- general_Urbano$lavadora / general_Urbano$sqrtNro
test_data$autoAdj <- general_Urbano$auto / general_Urbano$sqrtNro
head(test_data)
test_data <- test_data[10:14]
clust = predClusterVector(test_data)
View(mean_sd_Urbano)
View(means_sd)
test_data[,1]/means_sd[1,1]
test_data[,1] - means_sd[1,1]
(test_data[,1] - means_sd[1,1])/means_sd[2,1]
source('~/Documents/techo/indice de riqueza relativa/predict.R')
source('~/Documents/techo/indice de riqueza relativa/predict.R')
source('~/Documents/techo/indice de riqueza relativa/predict.R')
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
cluster <- c()
for ( row in 1:dim(df_Valores)[1]){
for (n in c(1,2,3)){
dist_i<-sqrt(sum((x1-centroides[,n])^2))
distancias <- append(distancias, dist_i)
}
cluster[row] <- which(distancias == min(distancias) )
}
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
source('~/Documents/techo/indice de riqueza relativa/predict.R')
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
cluster <- c()
for ( row in 1:dim(df_Valores)[1]){
for (n in c(1,2,3)){
dist_i<-sqrt(sum((df_Valores[row,]-centroides[,n])^2))
distancias <- append(distancias, dist_i)
}
cluster[row] <- which(distancias == min(distancias) )
}
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
source('~/Documents/techo/indice de riqueza relativa/predict.R')
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
cluster <- c()
for ( row in 1:dim(df_Valores)[1]){
distancias <- c()
for (n in c(1,2,3)){
dist_i<-sqrt(sum((df_Valores[row,]-centroides[,n])^2))
distancias <- append(distancias, dist_i)
}
cluster[row] <- which(distancias == min(distancias) )
}
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
a
Prueba1 <- as.data.frame(Prueba1)
Prueba1$Cluster <- a
Prueba1
clust = predClusterVector(test_data)
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
for (n in c(1,2,3)){
dist_1 <-sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
distancias <- append(distancias, dist_i)
}
cluster[row] <- which(distancias == min(distancias) )
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
source('~/Documents/techo/indice de riqueza relativa/predict.R')
dist <- as.data.frame()
dist <- as.data.frame()
dist <- as.data.frame()
debugSource('~/Documents/techo/indice de riqueza relativa/predict.R')
dist <- as.data.frame(1)
dist$1c <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
debugSource('~/Documents/techo/indice de riqueza relativa/predict.R')
debugSource('~/Documents/techo/indice de riqueza relativa/predict.R')
debugSource('~/Documents/techo/indice de riqueza relativa/predict.R')
function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
dist <- as.data.frame(1)
dist$p1  <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
dist$p2 <-sqrt(sum((df_Valores[,1:5]-centroides[,2])^2))
dist$p3 <-sqrt(sum((df_Valores[,1:5]-centroides[,3])^2))
cluster[row] <- which(distancias == min(distancias) )
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
dist$p1  <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
dist$p2 <-sqrt(sum((df_Valores[,1:5]-centroides[,2])^2))
dist$p3 <-sqrt(sum((df_Valores[,1:5]-centroides[,3])^2))
cluster[row] <- which(distancias == min(distancias) )
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
clust = predClusterVector(test_data)
dist$p1  <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
dist$p2 <-sqrt(sum((df_Valores[,1:5]-centroides[,2])^2))
dist$p3 <-sqrt(sum((df_Valores[,1:5]-centroides[,3])^2))
dist$min <- which(dist[,1:3] == min(dist[,1:3]) )
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
dist$p1  <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
dist$p2 <-sqrt(sum((df_Valores[,1:5]-centroides[,2])^2))
dist$p3 <-sqrt(sum((df_Valores[,1:5]-centroides[,3])^2))
dist$min <- which(dist[,1:3] == min(dist[,1:3]) )
cluster <- c("mid","low","hig")[ match( cluster, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
a
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
dist$p1  <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
dist$p2 <-sqrt(sum((df_Valores[,1:5]-centroides[,2])^2))
dist$p3 <-sqrt(sum((df_Valores[,1:5]-centroides[,3])^2))
dist$min <- which(dist[,1:3] == min(dist[,1:3]) )
cluster <- c("mid","low","hig")[ match( dist$min, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
a
Prueba1 <- as.data.frame(Prueba1)
Prueba1$Cluster <- a
Prueba1
source('~/Documents/techo/indice de riqueza relativa/predict.R')
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
dist$p1  <- sqrt(sum((df_Valores[,1:5]-centroides[,1])^2))
print(dist[,1])
dist$p2 <-sqrt(sum((df_Valores[,1:5]-centroides[,2])^2))
print(dist[,2])
dist$p3 <-sqrt(sum((df_Valores[,1:5]-centroides[,3])^2))
print(dist[,3])
dist$min <- which(dist[,1:3] == min(dist[,1:3]) )
print(dist[,4])
cluster <- c("mid","low","hig")[ match( dist$min, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
source('~/Documents/techo/indice de riqueza relativa/predict.R')
View(centroides)
for (i in 1:3){
dist$i = 0
for (j in 1:5){
dist$i <- dist$i +  (df_Valores[,j] - centroides[j,i])^2
}
}
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
for (i in 1:3){
dist$i = 0
for (j in 1:5){
dist$i <- dist$i +  (df_Valores[,j] - centroides[j,i])^2
}
}
cluster <- c("mid","low","hig")[ match( dist$min, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
dist$i <- dist$i +  (df_Valores[,j] - centroides[j,i])
predClusterVector <- function(df_Valores,centroids=centroides, means = means_sd){
df_Valores[,1] <- (df_Valores[,1] - means_sd[1,1])/means_sd[2,1]
df_Valores[,2] <- (df_Valores[,2] - means_sd[1,2])/means_sd[2,2]
df_Valores[,3] <- (df_Valores[,3] - means_sd[1,3])/means_sd[2,3]
df_Valores[,4] <- (df_Valores[,4] - means_sd[1,4])/means_sd[2,4]
df_Valores[,5] <- (df_Valores[,5] - means_sd[1,5])/means_sd[2,5]
for (i in 1:3){
dist$i = 0
for (j in 1:5){
dist$i <- dist$i +  (df_Valores[,j] - centroides[j,i])
}
}
cluster <- c("mid","low","hig")[ match( dist$min, c(1,2,3))]
print(cluster)
return(cluster)
}
Prueba1 <- matrix(runif(50),10,5)
a = predClusterVector(Prueba1)
setwd("/media/marco/165d5eb4-ca0f-4d82-a5d6-3052d1663348/TECHO/SELAVIP")
vivienda <- read_delim("CSV/EH2017_Vivienda.csv",
";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
require(data.table)
setwd("/media/marco/165d5eb4-ca0f-4d82-a5d6-3052d1663348/TECHO/SELAVIP")
personas <- read_delim("CSV/EH2017_Persona.csv",
";", escape_double = FALSE, trim_ws = TRUE)
personas <- personas[,c("folio","nro","area","yhog" , "yhogpc" , "factor", "niv_ed" , "condact" , "s02a_02", "s06b_16","s06b_17","s06b_18","s06b_19","s06b_19a")]
personas <- as.data.table(personas)
personas <- personas[personas[, .I[nro == max(nro)], by=folio]$V1]
personas$sqrtNro <- sqrt(personas$nro)
head(personas)
#Uniendo las bases de datos
general <- personas
general_factor <- general[rep(seq_len(nrow(general)), general$factor),]
general_Urbano <- general_factor[which( general_factor$area == 1),]
general_Urbano$yhog[is.na(general_Urbano$yhog)] <- 0
head(general_Urbano)
quantile(general_Urbano$yhog, prob = seq(0, 1, length = 11), type = 5)
general_Urbano <- within(general_Urbano, div <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:10/10), include.lowest=TRUE)))
general_Urbano <- within(general_Urbano, quartile <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:4/4), include.lowest=TRUE)))
general_Urbano <- within(general_Urbano, quintile <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:5/5), include.lowest=TRUE)))
# indicadores ingreso
mean(general_Urbano[which(general_Urbano$div ==1),]$yhog)
hist(general_Urbano[which(general_Urbano$quartile ==1),]$yhog)
hist(general_Urbano[which(general_Urbano$quintile ==1),]$yhog)
# indicadores porcentaje de jefes de hogar mujeres
table(general_Urbano[which(general_Urbano$quintile ==1),]$s02a_02)
table(general_Urbano[which(general_Urbano$quartile ==1),]$s02a_02)
table(general_Urbano[which(general_Urbano$div ==1),]$s02a_02)
quantile(general_Urbano$yhog, prob = seq(0, 1, length = 11), type = 5)
general_Urbano <- within(general_Urbano, div <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:10/10), include.lowest=TRUE)))
general_Urbano$yhogpc[is.na(general_Urbano$yhogpc)] <- 0
general_Urbano <- within(general_Urbano, div <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:10/10), include.lowest=TRUE)))
general_Urbano <- within(general_Urbano, quartile <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:4/4), include.lowest=TRUE)))
general_Urbano <- within(general_Urbano, quintile <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:5/5), include.lowest=TRUE)))
# indicadores ingreso
mean(general_Urbano[which(general_Urbano$div ==1),]$yhog)
hist(general_Urbano[which(general_Urbano$quartile ==1),]$yhog)
hist(general_Urbano[which(general_Urbano$quintile ==1),]$yhog)
# indicadores porcentaje de jefes de hogar mujeres
table(general_Urbano[which(general_Urbano$quintile ==1),]$s02a_02)
table(general_Urbano[which(general_Urbano$quartile ==1),]$s02a_02)
table(general_Urbano[which(general_Urbano$div ==1),]$s02a_02)
#Número de integrantes promedio
hist(general_Urbano[which(general_Urbano$div ==1),]$nro)
mean(general_Urbano[which(general_Urbano$quartile ==1),]$nro)
mean(general_Urbano[which(general_Urbano$quintile ==1),]$nro)
table(general_Urbano$nro)
# Empleo informal
table(general_Urbano[which(general_Urbano$div ==1),]$s06b_17)
table(general_Urbano[which(general_Urbano$quartile ==1),]$s06b_17)
table(general_Urbano[which(general_Urbano$quintile ==1),]$s06b_17)
table(general_Urbano[which(general_Urbano$div ==1),]$s06b_19)
table(general_Urbano[which(general_Urbano$quartile ==1),]$s06b_19)
table(general_Urbano[which(general_Urbano$quintile ==1),]$s06b_19)
vivienda <- read_delim("CSV/EH2017_Vivienda.csv",
";", escape_double = FALSE, trim_ws = TRUE)
total <- merge(vivienda, personas, by = "folio")
total <- total[which(total$area.x == 1),]
total <- within(total, div <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:10/10), include.lowest=TRUE)))
total$yhogpc[is.na(total$yhogpc)] <- 0
total <- within(total, div <- as.integer(cut(yhogpc, quantile(yhogpc, probs=0:10/10), include.lowest=TRUE)))
total$yhogpc[is.na(total$yhogpc)] <- 0
total <- total[rep(seq_len(nrow(total)), total$factor.x),]
table(total[which(total$div== 1),]$s01a_16)
names <- c("Banio o pozo con descarga", "Letrina de pozo ciego", "POzo abierto, sin piso" ,
"Banio ecologico", "ninguno")
table(total[which(total$div== 1),]$s01a_16)
table(total[which(total$div== 1),]$s01a_25)
prop.table(table(total[which(total$div== 3),]$s01a_25))
names(total)
table(total[which(total$div== 1),]$s01a_15)
prop.table(table(total[which(total$div== 3),]$s01a_15))
table(total[which(total$div== 1),]$s01a_02)
prop.table(table(total[which(total$div== 3),]$s01a_02))
names = c("Propia y totalmente pagada", "Propia y la estan pagando", "Alquilada", "Mixto", "Anticrético", "Cedida por servicios", "Prestada (parientes o amigos)", "Otra")
total$s01a_02 = factor(total$s01a_02)
levels(total$s01a_02) <- names
table(total[which(total$div== 1),]$s01a_02)
prop.table(table(total[which(total$div== 3),]$s01a_02))
library(readr)
require(data.table)
setwd("/media/marco/165d5eb4-ca0f-4d82-a5d6-3052d1663348/TECHO/DatosCamp")
vivienda <- read_delim("CSV/EH2017_Vivienda.csv",
";", escape_double = FALSE, trim_ws = TRUE)
# datos de vivienda
expandido <- vivienda[rep(seq_len(nrow(vivienda)), vivienda$factor),]
table(vivienda$s01a_06)
table(vivienda$s01a_07)
vivienda$punTecho <-0
library(readr)
require(data.table)
setwd("/media/marco/165d5eb4-ca0f-4d82-a5d6-3052d1663348/TECHO/DatosCamp")
vivienda <- read_delim("CSV/EH2017_Vivienda.csv",
";", escape_double = FALSE, trim_ws = TRUE)
table(vivienda$s01a_06)
table(vivienda$s01a_07)
vivienda$punTecho <-0
vivienda$punPiso <- 0
vivienda$punMuro <-0
table(vivienda$punMuro)
replace(vivienda$punMuro,vivienda$s01a_06 == 1 ,1.5)
table(vivienda$punMuro)
replace(vivienda$punMuro,vivienda$s01a_06 == 1 ,1.5)
vivenda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 1 ,1.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 1 ,1.5)
table(vivienda$punMuro)
table(vivienda$s01a_06)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 = 2  ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 == 2  ,0.5)
table(vivienda$punMuro)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 == 1  ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 == 2  ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 == 1  ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 3 & vivienda$s01a_07 == 2  ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 3 & vivienda$s01a_07 == 1  ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 5 ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 4 ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 6 ,0.5)
table(vivienda$punMuro)
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 = 1 , 1)
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 == 1 , 1)
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 == 2 | vivienda$s01a_08 == 3  , 1.5)
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 == 4 , 0.5)
table(vivienda$punTecho)
# Puntaje para el piso
vivienda$punPiso <- 0
vivienda$punPiso = replace(vivienda$punPiso, vivienda$s01a_09 == 5 | vivienda$s01a_09 == 7, 1  )
vivienda$punPiso = replace(vivienda$punPiso, vivienda$s01a_09 == 2 | vivienda$s01a_09 == 3 | vivienda$s01a_09 == 4 | vivienda$s01a_09 == 6, 2  )
table(vivienda$punPiso)
vivienda$nbiMuro = 1 - vivienda$punMuro
vivienda$nbiPiso = 1 - vivienda$punPiso
viviensa$nbiTecho = 1 - vivienda$punTecho
vivienda$nbiMuro = 1 - vivienda$punMuro
vivienda$nbiTecho = 1 - vivienda$punTecho
vivienda$nbiMuro = 1 - vivienda$punMuro
vivienda$nbiVivienda = (vivienda$nbiMuro + vivienda$nbiPiso + vivienda$nbiTecho)/3
table(vivienda$nbiVivienda)
vivienda$nbiVivienda = (vivienda$nbiMuro + vivienda$nbiPiso + vivienda$nbiTecho)/3
table(vivienda$nbiVivienda)
vivienda$nbiViviendaBinario = 0
vivienda$nbiViviendaBinario = replace(vivienda$nbiViviendaBinario, vivienda$nbiVivienda > 0, 1)
table(vivienda$nbiViviendaBinario)
proptable(vivienda$nbiViviendaBinario)
prop.table(vivienda$nbiViviendaBinario)
table(vivienda$nbiViviendaBinario)
# datos de vivienda
expandido <- vivienda[rep(seq_len(nrow(vivienda)), vivienda$factor),]
table(expandido$nbiViviendaBinario)
library(readr)
require(data.table)
setwd("/media/marco/165d5eb4-ca0f-4d82-a5d6-3052d1663348/TECHO/DatosCamp")
vivienda <- read_delim("CSV/EH2017_Vivienda.csv",
";", escape_double = FALSE, trim_ws = TRUE)
personas <- read_delim("CSV/EH2017_Persona.csv",
";", escape_double = FALSE, trim_ws = TRUE)
personas <- personas[,c("folio","nro","area", "niv_ed" , "condact" , "s02a_02")]
personas <- as.data.table(personas)
personas <- personas[personas[, .I[nro == max(nro)], by=folio]$V1]
vivienda <- merge(vivienda, personas, by = "folio")
# Puntajes para los muros
vivienda$punMuro <-0
table(vivienda$punMuro)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 1 ,1.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 == 2  ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 2 & vivienda$s01a_07 == 1  ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 3 & vivienda$s01a_07 == 2  ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 3 & vivienda$s01a_07 == 1  ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 4 ,0.5)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 5 ,1)
vivienda$punMuro = replace(vivienda$punMuro,vivienda$s01a_06 == 6 ,0.5)
# Puntaje para los techos
vivienda$punTecho <-0
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 == 1 , 1)
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 == 2 | vivienda$s01a_08 == 3  , 1.5)
vivienda$punTecho = replace(vivienda$punTecho, vivienda$s01a_08 == 4 , 0.5)
table(vivienda$punTecho)
# Puntaje para el piso
vivienda$punPiso <- 0
vivienda$punPiso = replace(vivienda$punPiso, vivienda$s01a_09 == 5 | vivienda$s01a_09 == 7, 1  )
vivienda$punPiso = replace(vivienda$punPiso, vivienda$s01a_09 == 2 | vivienda$s01a_09 == 3 | vivienda$s01a_09 == 4 | vivienda$s01a_09 == 6, 2  )
table(vivienda$punPiso)
vivienda$nbiPiso = 1 - vivienda$punPiso
vivienda$nbiTecho = 1 - vivienda$punTecho
vivienda$nbiMuro = 1 - vivienda$punMuro
vivienda$nbiVivienda = (vivienda$nbiMuro + vivienda$nbiPiso + vivienda$nbiTecho)/3
table(vivienda$nbiVivienda)
vivienda$nbiViviendaBinario = 0
vivienda$nbiViviendaBinario = replace(vivienda$nbiViviendaBinario, vivienda$nbiVivienda > 0, 1)
table(vivienda$nbiViviendaBinario)
# datos de vivienda
expandido <- vivienda[rep(seq_len(nrow(vivienda)), vivienda$factor),]
table(expandido$nbiViviendaBinario)
